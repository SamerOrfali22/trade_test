// Mocks generated by Mockito 5.4.2 from annotations
// in dart_kit/test/src/base_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:dart_kit/src/models/invoke_status.dart' as _i5;
import 'package:dart_kit/src/usecases/result_usecase.dart' as _i6;
import 'package:dart_kit/src/usecases/subject_usecase.dart' as _i8;
import 'package:dart_kit/src/usecases/usecase.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

import 'base_mocks.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T> extends _i1.SmartFake implements _i2.Future<T> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CallbackVoid].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallbackVoid extends _i1.Mock implements _i3.CallbackVoid {
  MockCallbackVoid() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call() => super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CallbackInt].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallbackInt extends _i1.Mock implements _i3.CallbackInt {
  MockCallbackInt() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [CallbackString].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallbackString extends _i1.Mock implements _i3.CallbackString {
  MockCallbackString() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [ValueCallbackStringInt].
///
/// See the documentation for Mockito's code generation for more information.
class MockValueCallbackStringInt extends _i1.Mock implements _i3.ValueCallbackStringInt {
  MockValueCallbackStringInt() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int call(String? param) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [UseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCase<P> extends _i1.Mock implements _i4.UseCase<P> {
  MockUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<_i5.InvokeStatus> call(
    P? params, {
    Duration? timeout = const Duration(minutes: 5),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
          {#timeout: timeout},
        ),
        returnValue: _i2.Stream<_i5.InvokeStatus>.empty(),
      ) as _i2.Stream<_i5.InvokeStatus>);

  @override
  _i2.Future<void> executeSync(P? params) => (super.noSuchMethod(
        Invocation.method(
          #executeSync,
          [params],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> doWork(P? params) => (super.noSuchMethod(
        Invocation.method(
          #doWork,
          [params],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [ResultUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResultUseCase<P, R> extends _i1.Mock implements _i6.ResultUseCase<P, R> {
  MockResultUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<R> call(P? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #call,
                  [params],
                ),
              ),
              (R v) => _i2.Future<R>.value(v),
            ) ??
            _FakeFuture_0<R>(
              this,
              Invocation.method(
                #call,
                [params],
              ),
            ),
      ) as _i2.Future<R>);

  @override
  _i2.Future<R> doWork(P? params) => (super.noSuchMethod(
        Invocation.method(
          #doWork,
          [params],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #doWork,
                  [params],
                ),
              ),
              (R v) => _i2.Future<R>.value(v),
            ) ??
            _FakeFuture_0<R>(
              this,
              Invocation.method(
                #doWork,
                [params],
              ),
            ),
      ) as _i2.Future<R>);
}

/// A class which mocks [SubjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubjectUseCase<P, T> extends _i1.Mock implements _i8.SubjectUseCase<P, T> {
  MockSubjectUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call(P? params) => super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Stream<T> observe() => (super.noSuchMethod(
        Invocation.method(
          #observe,
          [],
        ),
        returnValue: _i2.Stream<T>.empty(),
      ) as _i2.Stream<T>);

  @override
  _i2.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Stream<T> createObservable(P? params) => (super.noSuchMethod(
        Invocation.method(
          #createObservable,
          [params],
        ),
        returnValue: _i2.Stream<T>.empty(),
      ) as _i2.Stream<T>);
}
